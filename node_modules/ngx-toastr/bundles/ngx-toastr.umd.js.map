{
  "version": 3,
  "file": "ngx-toastr.umd.js",
  "sources": [
    "ng://ngx-toastr/out/toastr/toast-noanimation.component.ts",
    "ng://ngx-toastr/out/toastr/toastr.module.ts",
    "ng://ngx-toastr/out/toastr/default-config.ts",
    "ng://ngx-toastr/out/toastr/toast.component.ts",
    "ng://ngx-toastr/out/toastr/toastr.service.ts",
    "ng://ngx-toastr/out/toastr/toast-token.ts",
    "ng://ngx-toastr/out/toastr/toast-injector.ts",
    "ng://ngx-toastr/out/toastr/toastr-config.ts",
    "ng://ngx-toastr/out/toastr/toast.directive.ts",
    "ng://ngx-toastr/out/overlay/overlay.ts",
    "ng://ngx-toastr/out/overlay/overlay-container.ts",
    "ng://ngx-toastr/out/overlay/overlay-ref.ts",
    "ng://ngx-toastr/out/portal/dom-portal-host.ts",
    "ng://ngx-toastr/out/portal/portal.ts",
    "ng://ngx-toastr/node_modules/tslib/tslib.es6.js"
  ],
  "sourcesContent": [
    "import { CommonModule } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  Component,\r\n  HostBinding,\r\n  HostListener,\r\n  NgModule,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { SafeHtml } from '@angular/platform-browser';\r\n\r\nimport { Subscription } from 'rxjs/Subscription';\r\n\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\n\r\n@Component({\r\n  selector: '[toast-component]',\r\n  template: `\r\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\r\n    {{ title }}\r\n  </div>\r\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\r\n  </div>\r\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\r\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\r\n    {{ message }}\r\n  </div>\r\n  <div *ngIf=\"options.progressBar\">\r\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\r\n  </div>\r\n  `,\r\n})\r\nexport class ToastNoAnimation implements OnDestroy {\r\n  message?: string | SafeHtml | null;\r\n  title?: string;\r\n  options: IndividualConfig;\r\n  /** width of progress bar */\r\n  width = -1;\r\n  /** a combination of toast type and options.toastClass */\r\n  @HostBinding('class') toastClasses = '';\r\n  /** controls animation */\r\n  state = 'inactive';\r\n  private timeout: any;\r\n  private intervalId: any;\r\n  private hideTime: number;\r\n  private sub: Subscription;\r\n  private sub1: Subscription;\r\n\r\n  constructor(\r\n    protected toastrService: ToastrService,\r\n    public toastPackage: ToastPackage,\r\n    protected appRef: ApplicationRef,\r\n  ) {\r\n    this.message = toastPackage.message;\r\n    this.title = toastPackage.title;\r\n    this.options = toastPackage.config;\r\n    this.toastClasses = `${toastPackage.toastType} ${\r\n      toastPackage.config.toastClass\r\n    }`;\r\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\r\n      this.activateToast();\r\n    });\r\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\r\n      this.remove();\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n    this.sub1.unsubscribe();\r\n    clearInterval(this.intervalId);\r\n    clearTimeout(this.timeout);\r\n  }\r\n  /**\r\n   * activates toast and sets timeout\r\n   */\r\n  activateToast() {\r\n    this.state = 'active';\r\n    if (!this.options.disableTimeOut && this.options.timeOut) {\r\n      this.timeout = setTimeout(() => {\r\n        this.remove();\r\n      }, this.options.timeOut);\r\n      this.hideTime = new Date().getTime() + this.options.timeOut;\r\n      if (this.options.progressBar) {\r\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n      }\r\n    }\r\n    if (this.options.onActivateTick) {\r\n      this.appRef.tick();\r\n    }\r\n  }\r\n  /**\r\n   * updates progress bar width\r\n   */\r\n  updateProgress() {\r\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\r\n      return;\r\n    }\r\n    const now = new Date().getTime();\r\n    const remaining = this.hideTime - now;\r\n    this.width = remaining / this.options.timeOut * 100;\r\n    if (this.options.progressAnimation === 'increasing') {\r\n      this.width = 100 - this.width;\r\n    }\r\n    if (this.width <= 0) {\r\n      this.width = 0;\r\n    }\r\n    if (this.width >= 100) {\r\n      this.width = 100;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * tells toastrService to remove this toast after animation time\r\n   */\r\n  remove() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.state = 'removed';\r\n    this.timeout = setTimeout(\r\n      () => this.toastrService.remove(this.toastPackage.toastId),\r\n    );\r\n  }\r\n  @HostListener('click')\r\n  tapToast() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.toastPackage.triggerTap();\r\n    if (this.options.tapToDismiss) {\r\n      this.remove();\r\n    }\r\n  }\r\n  @HostListener('mouseenter')\r\n  stickAround() {\r\n    if (this.state === 'removed') {\r\n      return;\r\n    }\r\n    clearTimeout(this.timeout);\r\n    this.options.timeOut = 0;\r\n    this.hideTime = 0;\r\n\r\n    // disable progressBar\r\n    clearInterval(this.intervalId);\r\n    this.width = 0;\r\n  }\r\n  @HostListener('mouseleave')\r\n  delayedHideToast() {\r\n    if (this.options.disableTimeOut\r\n      || this.options.extendedTimeOut === 0\r\n      || this.state === 'removed') {\r\n      return;\r\n    }\r\n    this.timeout = setTimeout(\r\n      () => this.remove(),\r\n      this.options.extendedTimeOut,\r\n    );\r\n    this.options.timeOut = this.options.extendedTimeOut;\r\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\r\n    this.width = -1;\r\n    if (this.options.progressBar) {\r\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ToastNoAnimation],\r\n  exports: [ToastNoAnimation],\r\n  entryComponents: [ToastNoAnimation],\r\n})\r\nexport class ToastNoAnimationModule {}\r\n",
    "import { CommonModule } from '@angular/common';\nimport {\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\n\nimport { Overlay } from '../overlay/overlay';\nimport { OverlayContainer } from '../overlay/overlay-container';\nimport { DefaultGlobalConfig } from './default-config';\nimport { TOAST_CONFIG } from './toast-token';\nimport { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [Toast],\n  declarations: [Toast],\n  entryComponents: [Toast],\n})\nexport class ToastrModule {\n  constructor(@Optional() @SkipSelf() parentModule: ToastrModule) {\n    if (parentModule) {\n      throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(config: Partial<GlobalConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: ToastrModule,\n      providers: [\n        { provide: TOAST_CONFIG, useValue: { config, defaults: DefaultGlobalConfig } },\n        OverlayContainer,\n        Overlay,\n        ToastrService,\n      ],\n    };\n  }\n}\n",
    "import { Toast } from './toast.component';\nimport { GlobalConfig } from './toastr-config';\n\nexport class DefaultGlobalConfig implements GlobalConfig {\n  // Global\n  maxOpened = 0;\n  autoDismiss = false;\n  newestOnTop = true;\n  preventDuplicates = false;\n  iconClasses = {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning',\n  };\n\n  // Individual\n  toastComponent = Toast;\n  closeButton = false;\n  disableTimeOut: false;\n  timeOut = 5000;\n  extendedTimeOut = 1000;\n  enableHtml = false;\n  progressBar = false;\n  toastClass = 'toast';\n  positionClass = 'toast-top-right';\n  titleClass = 'toast-title';\n  messageClass = 'toast-message';\n  easing = 'ease-in';\n  easeTime = 300;\n  tapToDismiss = true;\n  onActivateTick = false;\n  progressAnimation: 'decreasing' | 'increasing' = 'decreasing';\n}\n",
    "import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport {\n  Component,\n  HostBinding,\n  HostListener,\n  NgZone,\n  OnDestroy,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\n\n@Component({\n  selector: '[toast-component]',\n  template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }}\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n  animations: [\n    trigger('flyInOut', [\n      state('inactive', style({\n        display: 'none',\n        opacity: 0,\n      })),\n      state('active', style({})),\n      state('removed', style({ opacity: 0 })),\n      transition('inactive => active',\n        animate('{{ easeTime }}ms {{ easing }}')\n      ),\n      transition('active => removed',\n        animate('{{ easeTime }}ms {{ easing }}'),\n      ),\n    ]),\n  ],\n  preserveWhitespaces: false,\n})\nexport class Toast implements OnDestroy {\n  message?: string | SafeHtml | null;\n  title?: string;\n  options: IndividualConfig;\n  /** width of progress bar */\n  width = -1;\n  /** a combination of toast type and options.toastClass */\n  @HostBinding('class') toastClasses = '';\n  /** controls animation */\n  @HostBinding('@flyInOut') state = {\n    value: 'inactive',\n    params: {\n      easeTime: this.toastPackage.config.easeTime,\n      easing: 'ease-in',\n    },\n  };\n  private timeout: any;\n  private intervalId: any;\n  private hideTime: number;\n  private sub: Subscription;\n  private sub1: Subscription;\n\n  constructor(\n    protected toastrService: ToastrService,\n    public toastPackage: ToastPackage,\n    protected ngZone?: NgZone,\n  ) {\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = { ...this.state, value: 'active' };\n    if (!this.options.disableTimeOut && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = (remaining / this.options.timeOut) * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = {...this.state, value: 'removed'};\n    this.outsideTimeout(() =>\n        this.toastrService.remove(this.toastPackage.toastId),\n        +this.toastPackage.config.easeTime,\n      );\n  }\n  @HostListener('click')\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  @HostListener('mouseenter')\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  @HostListener('mouseleave')\n  delayedHideToast() {\n    if (this.options.disableTimeOut\n      || this.options.extendedTimeOut === 0\n      || this.state.value === 'removed') {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() =>\n        this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)\n      );\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func: Function, timeout: number) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() =>\n        this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)\n      );\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  private runInsideAngular(func: Function) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n",
    "import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n  SecurityContext\n} from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { Overlay } from '../overlay/overlay';\nimport { ComponentPortal } from '../portal/portal';\nimport { ToastInjector, ToastRef } from './toast-injector';\nimport { ToastToken, TOAST_CONFIG } from './toast-token';\nimport { ToastContainerDirective } from './toast.directive';\nimport {\n  GlobalConfig,\n  IndividualConfig,\n  ToastPackage,\n} from './toastr-config';\n\n\nexport interface ActiveToast {\n  /** Your Toast ID. Use this to close it individually */\n  toastId: number;\n  /** the message of your toast. Stored to prevent duplicates */\n  message: string;\n  /** a reference to the component see portal.ts */\n  portal: ComponentRef<any>;\n  /** a reference to your toast */\n  toastRef: ToastRef<any>;\n  /** triggered when toast is active */\n  onShown: Observable<any>;\n  /** triggered when toast is destroyed */\n  onHidden: Observable<any>;\n  /** triggered on toast click */\n  onTap: Observable<any>;\n  /** available for your use in custom toast */\n  onAction: Observable<any>;\n}\n\n@Injectable()\nexport class ToastrService {\n  toastrConfig: GlobalConfig;\n  currentlyActive = 0;\n  toasts: ActiveToast[] = [];\n  overlayContainer: ToastContainerDirective;\n  previousToastMessage: string | undefined;\n  private index = 0;\n\n  constructor(\n    @Inject(TOAST_CONFIG) token: ToastToken,\n    private overlay: Overlay,\n    private _injector: Injector,\n    private sanitizer: DomSanitizer,\n    private ngZone: NgZone\n  ) {\n    const defaultConfig = new token.defaults;\n    this.toastrConfig = { ...defaultConfig, ...token.config };\n    this.toastrConfig.iconClasses = {\n      ...defaultConfig.iconClasses,\n      ...token.config.iconClasses,\n    };\n  }\n  /** show toast */\n  show(message?: string, title?: string, override: Partial<IndividualConfig> = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message?: string, title?: string, override: Partial<IndividualConfig> = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId?: number) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId: number) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive <= +this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines if toast message is already shown\n   */\n  isDuplicate(message: string) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].message === message) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** create a clone of global config and apply individual settings */\n  private applyConfig(override: Partial<IndividualConfig> = {}): GlobalConfig {\n    return { ...this.toastrConfig, ...override };\n  }\n\n  /**\n   * Find toast object by id\n   */\n  private _findToast(toastId: number): { index: number, activeToast: ActiveToast } | null {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return { index: i, activeToast: this.toasts[i] };\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  private _preBuildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast | null {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n\n  /**\n   * Creates and attaches toast data to component\n   * returns null if toast is duplicate and preventDuplicates == True\n   */\n  private _buildNotification(\n    toastType: string,\n    message: string | undefined,\n    title: string | undefined,\n    config: GlobalConfig,\n  ): ActiveToast | null {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    if (message && this.toastrConfig.preventDuplicates && this.isDuplicate(message)) {\n      return null;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[this.toasts.length - 1].toastId);\n      }\n    }\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage: string | SafeHtml | undefined | null = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(\n      this.index,\n      config,\n      sanitizedMessage,\n      title,\n      toastType,\n      toastRef,\n    );\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const ins: ActiveToast = {\n      toastId: this.index,\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal: overlayRef.attach(component, this.toastrConfig.newestOnTop),\n    };\n\n    if (!keepInactive) {\n      setTimeout(() => {\n        ins.toastRef.activate();\n        this.currentlyActive = this.currentlyActive + 1;\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\n\nimport { GlobalConfig } from './toastr-config';\n\nexport interface ToastToken {\n  config: GlobalConfig;\n  defaults: any;\n}\n\nexport const TOAST_CONFIG = new InjectionToken<ToastToken>('ToastConfig');\n",
    "import { Injector } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { OverlayRef } from '../overlay/overlay-ref';\nimport { ToastPackage } from './toastr-config';\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nexport class ToastRef<T> {\n  /** The instance of component opened into the toast. */\n  componentInstance: T;\n\n  /** Subject for notifying the user that the toast has finished closing. */\n  private _afterClosed = new Subject<any>();\n  /** triggered when toast is activated */\n  private _activate = new Subject<any>();\n  /** notifies the toast that it should close before the timeout */\n  private _manualClose = new Subject<any>();\n\n  constructor(private _overlayRef: OverlayRef) { }\n\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n\n  manualClosed(): Observable<any> {\n    return this._manualClose.asObservable();\n  }\n\n  /**\n   * Close the toast.\n   */\n  close(): void {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate(): Observable<any> {\n    return this._activate.asObservable();\n  }\n}\n\n\n/** Custom injector type specifically for instantiating components with a toast. */\nexport class ToastInjector implements Injector {\n  constructor(\n    private _toastPackage: ToastPackage,\n    private _parentInjector: Injector) { }\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ToastPackage && this._toastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get(token, notFoundValue);\n  }\n}\n",
    "import { SafeHtml } from '@angular/platform-browser';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { ComponentType } from '../portal/portal';\nimport { ToastRef } from './toast-injector';\n\n/**\n * Configuration for an individual toast.\n */\n export interface IndividualConfig {\n  /**\n   * disable both timeOut and extendedTimeOut\n   * default: false\n   */\n  disableTimeOut: boolean;\n  /**\n  * toast time to live in milliseconds\n  * default: 5000\n  */\n  timeOut: number;\n  /**\n  * toast show close button\n  * default: false\n  */\n  closeButton: boolean;\n  /** time to close after a user hovers over toast */\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  extendedTimeOut: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar: boolean;\n\n  /**\n   * changes toast progress bar animation\n   * default: decreasing\n   */\n  progressAnimation?: 'increasing' | 'decreasing';\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml: boolean;\n  /**\n   * css class on toast component\n   * default: toast\n   */\n  toastClass: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  titleClass: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  messageClass: string;\n  /**\n   * animation easing on toast\n   * default: ease-in\n   */\n  easing: string;\n  /**\n   * animation ease time on toast\n   * default: 300\n   */\n  easeTime: string | number;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss: boolean;\n  iconClasses: Partial<ToastrIconClasses>;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop: boolean;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap = new Subject<any>();\n  private _onAction = new Subject<any>();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | SafeHtml | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) {\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    this._onTap.complete();\n  }\n\n  onTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any) {\n    this._onAction.next(action);\n  }\n\n  onAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n}\n\n/* tslint:disable:no-empty-interface */\nexport interface GlobalToastrConfig extends GlobalConfig {}\nexport interface IndividualToastrConfig extends IndividualConfig {}\nexport interface ToastrConfig extends IndividualConfig {}\n",
    "import {\n  Directive,\n  ElementRef,\n  NgModule,\n} from '@angular/core';\n\n@Directive({\n  selector: '[toastContainer]',\n  exportAs: 'toastContainer',\n})\nexport class ToastContainerDirective {\n  constructor(private el: ElementRef) { }\n  getContainerElement(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n@NgModule({\n  declarations: [ToastContainerDirective],\n  exports: [ToastContainerDirective],\n})\nexport class ToastContainerModule {}\n",
    "import { ApplicationRef, ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { DomPortalHost } from '../portal/dom-portal-host';\nimport { OverlayRef } from './overlay-ref';\n\nimport { ToastContainerDirective } from '../toastr/toast.directive';\nimport { OverlayContainer } from './overlay-container';\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\n  export class Overlay {\n    private _paneElements: {string?: HTMLElement} = {};\n    constructor(private _overlayContainer: OverlayContainer,\n                private _componentFactoryResolver: ComponentFactoryResolver,\n                private _appRef: ApplicationRef) {}\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass: string = '', overlayContainer?: ToastContainerDirective): HTMLElement {\n    if (!this._paneElements[positionClass]) {\n      this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements[positionClass];\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(positionClass: string, overlayContainer?: ToastContainerDirective): HTMLElement {\n    const pane = document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS = [\n  Overlay,\n  OverlayContainer,\n];\n",
    "/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer {\n  private _containerElement: HTMLElement;\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  private _createContainer(): void {\n    const container = document.createElement('div');\n    container.classList.add('overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n",
    "import { ComponentRef } from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef {\n  constructor(private _portalHost: BasePortalHost) {}\n\n  attach(\n    portal: ComponentPortal<any>,\n    newestOnTop: boolean = true,\n  ): ComponentRef<any> {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n",
    "import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n} from '@angular/core';\nimport { BasePortalHost, ComponentPortal } from './portal';\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n  constructor(\n    private _hostDomElement: Element,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n  ) {\n    super();\n  }\n\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal<T>(\n    portal: ComponentPortal<T>,\n    newestOnTop: boolean,\n  ): ComponentRef<T> {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(\n      portal.component,\n    );\n    let componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(\n        this._getComponentRootNode(componentRef),\n        this._hostDomElement.firstChild,\n      );\n    } else {\n      this._hostDomElement.appendChild(\n        this._getComponentRootNode(componentRef),\n      );\n    }\n\n    return componentRef;\n  }\n\n  /** Gets the root HTMLElement for an instantiated component. */\n  private _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n  }\n}\n",
    "import {\n  ComponentRef,\n  Injector,\n  ViewContainerRef\n} from '@angular/core';\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> {\n  private _attachedHost?: BasePortalHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component: ComponentType<T>;\n\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef: ViewContainerRef;\n\n  /** Injector used for the instantiation of the component. */\n  injector: Injector;\n\n  constructor(component: ComponentType<T>, injector: Injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n\n  /** Attach this portal to a host. */\n  attach(host: BasePortalHost, newestOnTop: boolean) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n\n  /** Whether this portal is attached to a host. */\n  get isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host?: BasePortalHost) {\n    this._attachedHost = host;\n  }\n}\n\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nexport abstract class BasePortalHost {\n  /** The portal currently attached to the host. */\n  private _attachedPortal?: ComponentPortal<any>;\n\n  /** A function that will permanently dispose this host. */\n  private _disposeFn?: () => void;\n\n  attach(portal: ComponentPortal<any>, newestOnTop: boolean) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  abstract attachComponentPortal<T>(portal: ComponentPortal<T>, newestOnTop: boolean): ComponentRef<T>;\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"
  ],
  "names": [
    "HostListener",
    "HostBinding",
    "ApplicationRef",
    "Component",
    "CommonModule",
    "NgZone",
    "state",
    "style",
    "DomSanitizer",
    "Injector",
    "tslib_1.__values",
    "Subject",
    "Directive",
    "Injectable",
    "tslib_1.__extends"
  ],
  "mappings": ";;;;;;AcAA;;;;;;;;;;;;;AAgBA,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;KACpC,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;IAC5E,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAE/E,AAAO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5B,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;IACvC,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;CACxF;AAED,AAMC;AAED,AAQC;AAED,AAKC;AAED,AAEC;AAED,AAEC;AAED,AAOC;AAED,AA0BC;AAED,AAEC;AAED,AAAO,SAAS,QAAQ,CAAC,CAAC,EAAE;IACxB,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IAClE,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxB,OAAO;QACH,IAAI,EAAE,YAAY;YACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;YACnC,OAAO,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;SAC3C;KACJ,CAAC;CACL;;;;;;;;;;;;;;;;;;QDhFD,IAAA,CAAA,SAAA,GAAyC,SAAzC,CAA6D;QACzD,IAAI,CAAC,QAAT,GAAA,QAAA,CAAA;KACA;;;;;;;;QAIA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA;QACI,OAAJ,IAAA,CAAA,MAAsB,CAAtB,IAAA,EAA6B,WAA7B,CAAA,CAAA;KACA,CAAA;;;;;;QAIA,qBAAA,IAAA,GAAA,IAAA,CAAA,aAAA,CAAA;QACI,IAAJ,IAAA,EAAA;YACQ,IAAI,CAAZ,aAAA,GAAA,SAAA,CAAA;YACM,OAAN,IAAA,CAAA,MAAwB,EAAxB,CAA2B;SAC3B;KACA,CAAA;IACA,MAAA,CAAA,cAAA,CAAA,eAAA,CAAA,SAAA,EAAA,YAAA,EAAA;;;;;QAGM,GAAN,EAAA,YAAA;YACA,OAAe,IAAf,CAAA,aAAiC,IAAI,IAArC,CAAA;SACA;;;;;;;;;;IASA,eAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAA,IAAA,EAAA;;;;;;;;;;;;KAaA;;;;;;;QAOA,IAAA,CAAA,eAAA,GAAA,MAAA,CAAA;QACI,OAAJ,IAAA,CAAA,qBAAA,CAAA,MAAA,EAAA,WAAA,CAAA,CAAA;KACA,CAAA;;;;IAKA,cAAA,CAAA,SAAA,CAAuB,MAAvB,GAAA,YAAA;QACA,IAAM,IAAI,CAAC,eAAX,EAAA;YACA,IAAA,CAAA,eAAA,CAAA,eAAA,EAAA,CAAA;SACA;;;;;SAEA;KACA,CAAA;;;;;;;;IDxFA,OAAA,cAAA,CAAA;;;;;;;;;;;;AASA,IAAE,aAAF,kBAAA,UAAA,MAAA,EAAA;IAKAc,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA,CAAA;;;;;;;;;;;;KAOA;;;;;;;;IAcA,aAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,UAA0D,MAA1D,EAAA,WAAA,EAAA;;;;;;;;;QAWA,YAAA,GAAA,gBAAA,CAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;;;;QASA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CAAA;QAAA,IAAA,CAAW,YAAX,CAAA,YAAA;YACM,KAAK,CAAX,OAAA,CAAA,UAAA,CAAA,YACY,CAAC,QADb,CAAA,CAAA;YAGA,YAAA,CAAA,OAAA,EAAA,CAAA;SAEA,CAAA,CAAA;;;;;;;YAIA,IAAA,CAAA,eAAA,CAAA,WAAA,CAAA,IAAA,CAAA,qBAAA,CAAA,YAAA,CAAA,CAAA,CAAA;SACA;;KAEA,CAAA;;;;;;;;;;CDnEA,CAAA,cAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;IAOA,SAAA,UAAA,CAAA,WAAA,EAAA;QACA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;;;;;;;IAQA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,MAAA,EAAA,WAAA,EAAA;QACA,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA,EAAA,WAAA,GAAA,IAAA,CAAA,EAAA;;;;;;;;;;IDpBA,OAAA,UAAA,CAAA;;;;;;;;;;AAUA,IAAA,gBAAA,kBAAA,YAAA;IACA,SAAA,gBAAA,GAAA;KACG;;;;;;;IAOH,gBAAA,CAAA,SAAA,CAAU,mBAAV,GAAA,YAA4C;QACxC,IAAJ,CAAA,IAAa,CAAC,iBAAd,EAAA;YACA,IAAY,CAAC,gBAAgB,EAA7B,CAAA;SACA;;KAEA,CAAA;;;;;;ID5BA,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BE,SAAF,OAAA,CAAA,iBAAA,EAAA,yBAAA,EAAA,OAAA,EAAA;;QAEI,IAAJ,CAAA,yBAAkC,GAAlC,yBAAA,CAAA;QACA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;;;;;;;;;IAKA,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAA,aAAA,EAAA,gBAAA,EAAA;;QAEA,OAAA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,cAAA,CAAA,aAAA,EAAA,gBAAA,CAAA,CAAA,CAAA;;;;;;;IAMU,OAAV,CAAA,SAAA,CAA4B,cAAsB,GAAlD,UAAA,aAAA,EAAA,gBAAA,EAAA;QACI,IAAJ,aAAA,KAAA,KAAc,CAAd,EAAiB,EAAjB,aAAA,GAAA,EAAA,CAAA,EAAwC;QACpC,IAAI,CAAC,IAAT,CAAc,aAAd,CAAA,aAAA,CAAA,EAAA;YACQ,IAAR,CAAA,aAAA,CAAA,aAAA,CAAA,GAAA,IAAA,CAAA,kBAAA,CAAA,aAAA,EAAA,gBAAA,CAAA,CAAA;SACA;QAEI,OAAJ,IAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;;;;QAYA,IAAA,CAAA,gBAAA,EAAA;YACA,IAAA,CAAA,iBAAA,CAAA,mBAAA,EAAA,CAAA,WAAA,CAAiE,IAAjE,CAAA,CAAuE;;;;;;;;;;;;IA9CvE,OAAA,CAAE,SAAF,CAAY,iBAAZ,GAAA,UAAA,IAAA,EAAA;;;;;;;;;;;IA4DA,OAAA,OAAA,CAAA;CACA,EAAA,CAAE,CAAF;AACA,OAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAD,eAAA,EAAA;;;;;;ID/EA,EAUA,IAVA,EAAAX,mBAAA,GAUA;;;;;AACA,IAAA,iBAAoC,GAApC;IAAA,OAAA;;;;;;;;;;;IAHA,SAAA,uBAAA,CAAA,EAAA,EAAA;QACA,IAAA,CAAC,EAAD,GAAA,EAAA,CAAA;;;;;;QAYA,OAAA,IAAA,CAAA,EAAA,CAAA,aAAA,CAAA;;;CAJA,EAAA,CAAA,CAAA;AACA,uBAAA,CAAA,UAAA,GAAA;IACA,EAAA,IAAA,EAAAU,cAAA,EAAS,IAAT,EAAA,CAAA;gBACA,QAAA,EAAA,kBAAA;;;;;;;;;IDjBA,SAAA,oBAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA,IAAA,YAAA,kBAAA,YAAA;;;;;;;;;IAQA,SAAA,YAAA,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,SAAA,EAAA,QAAA,EAAA;;;;;QAGA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;QACI,IAAI,CAAC,SAAT,GAAA,SAAA,CAAA;QACI,IAAI,CAAC,QAAT,GAAA,QAAA,CAAA;QACA,IAAA,CAAA,MAAA,GAAA,IAAAD,eAAA,EAAA,CAAA;;;;YAEA,KAAA,CAAA,MAAA,CAAA,QAAA,EAAA,CAAA;SACA,CAAA,CAAA;KACG;;;;;;QAGH,IAAA,CAAA,MAAA,CAAA,IAA4B,EAA5B,CAAA;QACI,IAAI,CAAC,MAAT,CAAA,QAAwB,EAAxB,CAAA;KACG,CAAH;;;;IAEE,YAAF,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;QACI,OAAO,IAAI,CAAC,MAAhB,CAAA,YAAA,EAAA,CAAsC;KACnC,CAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QDvJA,IAAA,CAAA,WAAA,GAAA,WAAA,CAAoC;;;;;;;;QAOpC,IAAA,CAAA,SAAA,GAAA,IAAAA,eAAA,EAAA,CAAA;;;;QAEA,IAAA,CAAA,YAAA,GAAA,IAAAA,eAAA,EAAA,CAAA;KACA;;;;;;QAMA,IAAA,CAAA,YAAA,CAAA,QAAA,EAAA,CAAA;KACA,CAAA;;;;IAIA,QAAQ,CAAC,SAAS,CAAC,YAAnB,GAAA,YAAA;QACA,OAAA,IAAA,CAAA,YAAA,CAAA,YAAA,EAAA,CAAA;;;;;;IAIA,QAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;QACA,IAAA,CAAA,WAAA,CAAA,MAAA,EAAA,CAAA;;;;QAEA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA,CAAA;KACA,CAAA;;;;;IAGE,QAAQ,CAAV,SAAA,CAAA,WAAA,GAAA,YAAA;QACI,OAAJ,IAAA,CAAA,YAAA,CAAA,YAAA,EAAA,CAAA;KACA,CAAA;;;;;;KAIA,CAAA;;;;;;;KAOA,CAAA;;;;;IACE,QAAF,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;QACY,OAAZ,IAAA,CAAA,SAAY,CAAZ,YAAyB,EAAzB,CAAA;KACA,CAAA;IAAA,OAAA,QAAA,CAAA;;;;;;;;;;IAMA,SAAA,aAAA,CAAA,aAAoC,EAApC,eAAA,EAAA;QACA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;QACA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;;;;;;;;;;SDnEA;;;;;;;;;;;;;;;;;;;;AD8CA,IAAA,aAAA,kBAAA,YAAA;;;;;;;;IAMA,SAAS,aAAa,CAAtB,KAAA,EAAA,OAAA,EAAA,SAAA,EAAA,SAAA,EAAA,MACsB,EADtB;QAIA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;;;;;;;;;QAEM,IAAN,CAAA,YAAyC,CAAzC,WAAA,GAAmF,MAAnF,CAA0F,MAA1F,CAAA,EAAA,EAAA,aAAA,CAAA,WAAA,EAAA,KAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA;KACA;;;;;;;;;IAGE,aAAF,CAAA,SAAA,CAA4C,IAA5C,GAAA,UAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA;QACI,IAAJ,QAAA,KAAA,KAAA,CAAU,EAAV,EAAc,QAAQ,GAAtB,EAAA,CAAA,EAAA;QACI,IAAJ,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAA,GAAA,EAAA,CAAqC,EAArC;QACA,OAAA,IAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAAA,CAAA;;;;;;;;;IAGA,aAAA,CAAA,SAAA,CAAA,OAAc,GAAG,UAAjB,OAAkC,EAAlC,KAAA,EAAA,QAAA,EAAA;QACI,IAAJ,QAAgB,KAAhB,KAAA,CAAA,EAAA,EAAA,QAAA,GAA0C,EAAE,CAA5C,EAAA;QACA,qBAAA,IAAA,GAAA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,OAAA,IAAA,EAAA,CAAA;;;;;;;;;;IAIA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAA0C,OAA1C,EAAmD,KAAnD,EAA0D,QAA1D,EAAA;QACA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAA,GAAA,EAAA,CAAA,EAAA;;;;;;;;;;;IAKA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA;;;;;;;;;;;;IAUA,aAAA,CAAA,SAAiB,CAAjB,OAAA,GAAA,UAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA;QACA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAA,GAAA,EAAA,CAAA,EAAA;QACA,qBAAA,IAAA,GAAA,IAAA,CAAA,YAAA,CAAA,WAAA,CAAA,OAAA,IAAA,EAAA,CAAA;QAAA,OAAA,IAAA,CAAA,qBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;YAOA,KAAA,IAAA,EAAA,GAAAD,QAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA;gBACA,IAAA,KAAA,GAAA,EAAA,CAAU,KAAK,CAAf;gBACA,IAAgB,OAAhB,KAAA,SAAA,EAAA;oBACA,IAAkB,KAAlB,CAAA,OAAA,KAAA,OAAA,EAAA;wBACA,KAAA,CAAA,QAAA,CAAA,WAAA,EAAA,CAAA;wBACA,OAAA;qBACA;iBACA;qBACA;oBACA,KAAmB,CAAnB,QAAA,CAAA,WAAA,EAAA,CAAA;iBACA;aACA;SACA;QACA,OAAA,KAAA,EAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA;gBACQ;YACR,IAAQ;gBACR,IAAA,EAAA,IAAA,CAAA,EAAA,CAAA,IAAA,KAAA,EAAA,GAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;aACA;oBACgB,EAAhB,IAAA,GAAA,EAAA,MAAA,GAAA,CAAA,KAAA,CAAA,EAAA;SACA;;;;;;;;IAOA,aAAA,CAAA,SAAqB,CAAC,MAAtB,GAAA,UAAA,OAAA,EAAA;QACA,qBAAA,KAAA,GAAA,IAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA;QACA,IAAA,CAAO,KAAP,EAAA;YACA,OAAA,KAAA,CAAA;SACA;QACA,KAAA,CAAA,WAAA,CAAA,QAAA,CAAA,KAAA,EAAA,CAAA;;;;;;QAGA,IAAA,IAAsB,CAAtB,eAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,SAAA,IAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,eAAA,CAAA,EAAA;YACA,qBAAgB,CAAhB,GAAoB,IAApB,CAAA,MAAA,CAAA,IAAA,CAAA,eAAA,CAAA,CAAA,QAAA,CAAA;;;;;;;KAMA,CAAA;;;;;;IAMA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,OAAA,EAAA;;;;;;;;;;;;;IAcA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,QAAA,EAAA;QACI,IAAJ,QAAgB,KAAhB,KAAA,CAAA,EAAA,EAAA,QAAA,GAAA,EAA4C,CAA5C,EAAA;;;;;;;;;;;gBAOA,OACI,EADJ,KAAA,EACqB,CADrB,EAAA,WAAA,EAG6B,IAH7B,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA;aAMS;SACT;QACA,OAAA,IAAA,CAAA;;;;;;;;;;IAUA,aAAA,CAAA,SAAmB,CAAnB,qBAAA,GAAA,UAAsD,SAAS,EAA/D,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QACA,IAAA,MAAA,CAAA,cAAA,EAAA;YACA,OAAA,IAAA,CAAA,MAAA,CAAU,GAAV,CAAA,YAAA,EAA4B,OAAO,KAAnC,CAAA,kBAAA,CAAA,SAAqE,EAArE,OAAA,EAAA,KAAA,EAAuF,MAAvF,CAAA,CAAA,EAAA,CAAA,CAAA;SACA;QACI,OAAJ,IAAA,CAAA,kBAAA,CAAA,SAAiE,EAAjE,OAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;;;IAiBA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAA,SAAA,EAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA;QACA,IAAM,KAAN,GAAA,IAAA,CAAA;QACA,IAAM,CAAN,MAAA,CAAc,cAAd,EAAA;YACM,MAAN,IAAA,KAAA,CAAA,yBAAA,CAAA,CAAA;SACA;;QAEA,IAAA,OAAA,IAAA,IAAA,CAAA,YAAA,CAAA,iBAAA,IAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,EAAA;YAEQ,OAAR,IAAA,CAAA;SACA;QACA,IAAA,CAAA,oBAAA,GAAA,OAAA,CAAA;QACA,qBAAA,YAAA,GAAoC,KAApC,CAAA;QACA,IAAA,IAAA,CAAA,YAAA,CAAA,SAAA,IAAA,IAAA,CAAA,eAAA,IAAA,IAAA,CAAA,YAAA,CAAA,SAAA,EAAA;YACA,YAAA,GAAA,IAAA,CAAA;YAEQ,IAAR,IAAgB,CAAhB,YAAA,CAAA,WAAA,EAAA;gBACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA;;;;QAhMA,IAAC,CAAD,KAAA,GAAA,IAAA,CAAA,KAAA,GAAA,CAAA,CAAA;;;;SAUA;QAzCA,qBAAA,QAAA,GAAA,IAAA,QAAA,CAAA,UAAA,CAAA,CAAA;QARA,qBAAA,YAAA,GAAA,IAAA,YAAA,CAAA,IAAA,CAAA,KAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,SAAA,EAAA,QAAA,CAAA,CAAA;QAIA,qBAAA,aAAA,GAAA,IAAA,aAAA,CAAA,YAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA;QAHA,qBAAA,SAAA,GAAA,IAAA,eAAA,CAAA,MAAA,CAAA,cAAA,EAAA,aAAA,CAAA,CAAA;;;;;;;YDsDA,KA3DA,EAAA,YAAA,CAAA,KAAA,EAAA;;;;;;gBAkFc,GADd,CAAA,QAAA,CAC0C,QAD1C,EAAA,CAAA;gBACA,KAAA,CAAA,eAAA,GAAA,KAAA,CAAA,eAAA,GAAA,CAAA,CAAA;aACA,CAAA,CAAA;SACA;;;;IApBA,OAAA,aAAA,CAAA;;;;CAEA,CAAA;;;;IAEA,EAAA,IAAA,EAAA,OAAA,GAAA;IACA,EAAA,IAAA,EAAID,aAAJ,GAAA;IACA,EAAA,IAAA,EAAID,4BAAJ,GAAA;IACA,EAAA,IAAA,EAAAH,WAAA,GAAA;CACA,CAAA,EAAA,CAAA;;;;;AAgBA,IAAA,KAAA,kBAAA,YAAA;;;;;;IAMA,SAAA,KAAA,CAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QACA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;;;;;;QAGI,IAAI,CAAC,KAAK,GAAd,CAAA,CAAA,CAAA;;;;;;;;QAOA,IAAA,CAAA,KAAA,GAAA;YACQ,KAAR,EAAA,UAAA;YACQ,MAAM,EAAd;gBACU,QAAV,EAAA,IAAA,CAAyB,YAAY,CAArC,MAAA,CAA6C,QAA7C;gBACU,MAAV,EAAA,SAAA;aACA;SACA,CAAA;QACA,IAAA,CAAO,OAAP,GAAA,YAAA,CAAA,OAAA,CAAA;QACA,IAAA,CAAA,KAAA,GAAA,YAAA,CAAA,KAAA,CAAA;QACA,IAAA,CAAA,OAAA,GAAA,YAAA,CAAA,MAAA,CAAA;;;;;QAIA,IAAA,CAAA,IAAA,GAAA,YAAA,CAAA,QAAA,CAAA,YAAA,EAAA,CAAA,SAAA,CAAA,YAAA;YACQ,KAAK,CAAb,MAAA,EAAA,CAAuB;SACvB,CAAA,CAAA;KACA;;;;IAIA,KAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;QACA,IAAM,CAAN,GAAU,CAAC,WAAW,EAAtB,CAAyB;QACzB,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;QACI,aAAJ,CAAkB,IAAI,CAAC,UAAvB,CAAA,CAAA;QACA,YAAA,CAAA,IAAmB,CAAC,OAApB,CAAA,CAAA;KACA,CAAA;;;;;;;;;YASA,IAAA,CAAA,cAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;YACQ,IAAI,CAAC,QAAb,GAAwB,IAAxB,IAAA,EAAA,CAAA,OAAA,EAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA;YACM,IAAN,IAAA,CAAA,OAAA,CAAA,WAAA,EAAA;gBACA,IAAA,CAAA,eAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,cAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;aACA;SACA;KACA,CAAA;;;;;IAME,KAAF,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;QACI,IAAI,IAAI,CAAC,KAAK,KAAlB,CAAwB,IAAxB,IAAA,CAAA,KAAsC,KAAtC,GAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA;YACM,OAAO;SACR;QACD,qBAAJ,GAAA,GAAA,IAAmC,IAAnC,EAAA,CAAA,OAAA,EAAA,CAAA;QACI,qBAAJ,SAAA,GAAA,IAAA,CAAA,QAAA,GAAA,GAAA,CAAA;QACA,IAAM,CAAN,KAAA,GAAA,CAAA,SAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,IAAA,GAAA,CAAA;QACA,IAAA,IAAA,CAAA,OAAA,CAAA,iBAAA,KAAA,YAAA,EAAA;;;;;SAGA;QACI,IAAI,IAAI,CAAC,KAAK,IAAlB,GAAA,EAAA;YACM,IAAN,CAAA,KAAA,GAAA,GAAA,CAAA;SACK;KACL,CAAA;;;;;IAMA,KAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;;;;;QAGA,YAAkB,CAAlB,IAAA,CAAA,OAAA,CAAA,CAAA;QACI,IAAI,CAAR,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAmC,IAAnC,CAAA,KAAA,EAAA,EAAA,KAAA,EAAA,SAAA,EAAA,CAAA,CAAA;QACA,IAAA,CAAA,cAAqB,CAAC,YAAtB,EAAA,OAA2C,KAA3C,CAAA,aAAA,CAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,YAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;KACA,CAAA;;;;IAIA,KAAA,CAAA,SAAA,CAAgB,QAAQ,GAAG,YAAY;QACnC,IAAI,IAAR,CAAA,KAAA,CAAA,KAAwB,KAAxB,SAAsC,EAAE;YAChC,OAAR;SACA;QACA,IAAM,CAAN,YAAA,CAAA,UAAA,EAAA,CAAiC;QACjC,IAAA,IAAA,CAAA,OAAA,CAAA,YAAA,EAAA;;;;;;;IAGE,KAAF,CAAA,SAAiB,CAAjB,WAAA,GAAA,YAAA;QACI,IAAI,IAAI,CAAC,KAAb,CAAmB,KAAnB,KAAA,SAAA,EAAA;YACM,OAAN;SAGK;QAAL,YAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA;QACA,IAAM,CAAN,OAAA,CAAA,OAAA,GAAA,CAAA,CAAA;QACA,IAAA,CAAA,QAAA,GAAA,CAAA,CAAA;;;;;;;;IAIA,KAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;QACA,IAAM,KAAK,GAAX,IAAkB,CAAlB;QAGA,IAAA,IAAA,CAAA,OAAA,CAAA,cAAA;eAAA,IAAA,CAAA,OAAA,CAAA,eAAA,KAAA,CAAA;eACA,IAAA,CAAA,KAAA,CAAA,KAAA,KAAA,SAAA,EAAA;YACA,OAAA;SACA;;;;;QAEA,IAAA,IAAA,CAAA,OAAA,CAAyC,WAAzC,EAAA;YACQ,IAAI,CAAC,eAAb,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,cAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;SACA;KACA,CAAA;;;;;;;QAhMA,IAAC,KAAD,GAAA,IAAA,CAAA;QACA,IAAA,IAAE,CAAF,MAAA,EAAA;YACA,IAAE,CAAF,MAAA,CAAU,iBAAV,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,OAAA,GAAA,UAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,gBAAA,CAAA,IAAA,CAAA,CAAA,EAAA,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;YAiBA,IAAA,CAAA,UAAA,GAAA,WAAA,CAAA,YAAA,EAAA,OAAA,IAAA,EAAA,CAAA,EAAA,EAAA,OAAA,CAAA,CAAA;SACA;KACA,CAAA;;;;;IAKA,KAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAA+B,IAA/B,EAAA;QACA,IAAA,IAAA,CAAA,MAAA,EAAA;YACA,IAAA,CAAA,MAAA,CAAM,GAAN,CAAA,YAAA,EAAA,OAAA,IAAA,EAAqC,CAArC,EAAA,CAAA,CAAA;SAGA;aAGA;YACA,IAAA,EAAA,CAAA;SACA;KACA,CAAA;;;;IAvCA,EAAA,IAAA,EAASF,cAAT,EAAA,IAAA,EAAA,CAAA;gBADA,QAAuC,EAAvC,mBAAA;gBAPA,QAAA,EAAA,2vBAAA;;;wBAuDAG,gBAAG,CAAH,UAAc,EAAdC,gBAAA,CAAA;4BAEA,OAAA,EAAA,MAAA;4BAmFA,OAAA,EAAe,CAAf;yBAUA,CAAA,CAAA;wBAaAD,gBAAA,CAAA,QAAA,EAAAC,gBAAe,CAAf,EAAA,CAAA,CAAA;;;;;;;aD9KA,EAAA,EAAA;;;AAKA,KAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAA,aAAA,GAAA;IACA,EAAA,IAAA,EAAA,YAAA,GAAgB;IAChB,EAAA,IAAA,EAAAF,WAAA,GAAA;CACA,CAAA,EAAA,CAAA;AACA,KAAA,CAAA,cAAA,GAAA;IACA,cAAU,EAAV,CAAA,EAAA,IAAA,EAAAJ,gBAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,gBAAA,EAAA,IAAA,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA;IACA,UAAA,EAAA,CAAA,EAAW,IAAX,EAAAD,iBAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;IACA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,iBAAA,EAAA,IAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA;;CAGA,CAAA;;;;;AAMA,IAAA,mBAAA,kBAAA,YAAA;IACA,SAAA,mBAAA,GAAA;;QAEA,IAAA,CAAA,SAAA,GAAA,CAAe,CAAf;QACA,IAAA,CAAA,WAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,WAAA,GAAA,IAAoB,CAApB;QACA,IAAA,CAAA,iBAAA,GAAA,KAAA,CAAA;QACA,IAAA,CAAA,WAAA,GAAA;YACA,KAAA,EAAA,aAAA;YACA,IAAA,EAAA,YAAA;;YACA,OAAA,EAAA,eAAA;;;;;;QDjCA,IAAA,CAAA,eAAA,GAAA,IAAA,CAAA;;;;QAwBA,IAAA,CAAA,aAAA,GAAA,iBAAA,CAAA;QACI,IAAI,CAAR,UAAA,GAAsB,aAAtB,CAAA;QACA,IAAM,CAAN,YAAA,GAAsB,eAAtB,CAAA;QACA,IAAA,CAAA,MAAA,GAAA,SAAA,CAAA;QACA,IAAA,CAAA,QAAA,GAAA,GAAA,CAAA;;;;;IACE,OAAO,mBAA0C,CAAnD;CACA,EAAA,CAAA,CAAA;;;;;AAKA,IAAA,YAAQ,kBAAR,YAAA;;;;IAIA,SAAA,YAAA,CAAA,YAAA,EAAA;;;SAtBA;KACA;;;;;;;;YAKa,QAAb,EAAA,YAAA;;;;;;;SDvBA,CAAA;;;;;;gBAsDc,OADd,EAAA,CAAAI,mBAAA,CAAA;gBACA,OAAA,EAAA,CAA2B,KAA3B,CAAA;gBACA,YAAW,EAAX,CAAA,KAAA,CAAA;gBACA,eAAA,EAAA,CAAA,KAAA,CAAA;;;;AAdA,YAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;;;;;;;;;;;;;IAsBA,SAAS,gBAAT,CAAA,aAAA,EAAA,YAAqD,EAArD,MAAA,EAA+D;QAC/D,IAAM,KAAK,GAAX,IAAA,CAAA;QACA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;QACI,IAAI,CAAC,YAAT,GAAA,YAAA,CAAqC;QACrC,IAAM,CAAN,MAAA,GAAA,MAAA,CAAA;;;;;;;;QAKI,IAAI,CAAC,YAAT,GAAA,EAAA,CAA2B;;;;;;;;QAO3B,IAAA,CAAA,YAAA,GAAA,YAAA,CAAA,SAAA,GAAA,GAAA,GAAA,YAAA,CAAA,MAAA,CAAA,UAAA,CAAA;QACI,IAAI,CAAC,GAAT,GAAA,YAAA,CAAA,QAAA,CAAA,aAAA,EAAA,CAAA,SAAA,CAAA,YAAA;YACQ,KAAK,CAAC,aAAd,EAAA,CAAA;SACA,CAAA,CAAA;QACA,IAAA,CAAA,IAAA,GAAY,YAAZ,CAAA,QAAA,CAAA,YAAA,EAAA,CAAA,SAAA,CAAA,YAAA;YACA,KAAA,CAAA,MAAA,EAAA,CAAqB;SACrB,CAAA,CAAA;KACA;;;;IAIA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;QACA,IAAM,CAAN,GAAU,CAAC,WAAW,EAAE,CAAC;QACzB,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;QACA,aAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA;;;;;;;IAMA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QACI,IAAJ,CAAA,KAAA,GAAA,QAAA,CAAA;QACI,IAAJ,CAAA,IAAA,CAAA,OAAA,CAAA,cAAmB,IAAnB,IAA2B,CAA3B,OAAmC,CAAnC,OAAA,EAAA;YACQ,IAAR,CAAA,OAAA,GAAA,UAAiC,CAAC,YAAlC;gBACY,KAAZ,CAAA,MAAA,EAAA,CAAA;aACA,EAAA,IAAA,CAAA,OAAA,CAAsB,OAAO,CAAC,CAA9B;YACA,IAAA,CAAA,QAAA,GAAA,IAAA,IAAA,EAAA,CAAA,OAAA,EAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA;YACQ,IAAI,IAAZ,CAAA,OAAA,CAAyB,WAAzB,EAAA;gBACU,IAAV,CAAA,UAAA,GAAA,WAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,cAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;aACA;SACA;QACA,IAAM,IAAI,CAAC,OAAX,CAAmB,cAAnB,EAAA;YACA,IAAA,CAAA,MAAA,CAAA,IAAA,EAAA,CAAA;SACA;;;;;;IAMA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;QACA,IAAM,IAAN,CAAA,KAAA,KAAA,CAAA,IAAA,IAAA,CAAA,KAAA,KAAA,GAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA;YACA,OAAA;SACA;QACI,qBAAJ,GAAA,GAAA,IAAA,IAAA,EAAA,CAAA,OAAA,EAAA,CAAA;QACI,qBAAJ,SAAA,GAAA,IACiB,CADjB,QAAA,GAAA,GAAA,CAAA;QAGA,IAAA,CAAA,KAAA,GAAA,SAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,GAAA,GAAA,CAAA;;;;QAEA,IAAU,IAAV,CAAA,KAAA,IAAA,CAAA,EAAA;YACQ,IAAI,CAAC,KAAK,GAAlB,CAAA,CAAuB;SACvB;QACA,IAAA,IAAA,CAAA,KAAA,IAAA,GAAA,EAAA;YACQ,IAAR,CAAA,KAAA,GAAqB,GAArB,CAAA;SACA;KACA,CAAA;;;;;;QAIA,IAAA,KAAA,GAAA,IAAA,CAAA;QACI,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;YAC5B,OAAO;SACR;QACD,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAT,GAAiB,SAAjB,CAA2B;QACvB,IAAI,CAAC,OAAT,GAAA,UAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;SAOA;QACI,IAAI,CAAR,YAAqB,CAArB,UAAA,EAAA,CAAmC;QACnC,IAAA,IAAA,CAAA,OAAA,CAAA,YAAA,EAAA;YACA,IAAA,CAAA,MAAA,EAAmB,CAAnB;SACA;KACA,CAAA;;;;IAOA,gBAAA,CAAiB,SAAjB,CAAA,WAAA,GAAA,YAAA;QACI,IAAI,IAAI,CAAC,KAAb,KAAA,SAAgC,EAAE;YAC5B,OAAN;SACK;;;;;QAvJL,aAAA,CAAA,IAAY,CAAZ,UAAA,CAAA,CAAA;QACA,IAAA,CAAA,KAAA,GAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;YAiBA,IAAA,CAAA,UAAA,GAAA,WAAA,CAAA,YAAA,EAAA,OAAA,KAAA,CAAA,cAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;SACA;;;;AAtBA,gBAAA,CAAA,UAAA,GAAA;IADA,EAAA,IAAA,EAA2BD,cAA3B,EAAA,IAAA,EAAA,CAAA;gBAXA,QAAA,EAAgB,mBAAhB;;;CA0CA,CAAA;;AA+FA,gBAAA,CAAA,cAAA,GAAA,YAAA,EAAA,OAAA;IAaA,EAAA,IAAA,EAAA,aAAA,GAAA;;IA0BA,EAAA,IAAA,EAAAD,mBAAA,GAAA;;;IANA,cAAA,EAAS,CAAT,EAAA,IAAA,EAAUD,gBAAV,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;IACA,UAAA,EAAE,CAAF,EAAA,IAAS,EAAED,iBAAX,EAAyB,IAAzB,EAAA,CAAA,OAAA,EAAA,EAAA,EAAA;IACA,aAAA,EAAA,CAAA,EAAA,IAAA,EAAcA,iBAAd,EAAA,IAAA,EAAkC,CAAlC,YAAA,EAAA,EAAA,EAAA;IACA,kBAAA,EAAA,CAAW,EAAX,IAAA,EAAAA,iBAAA,EAAA,IAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA;CACA,CAAA;AACA,IAAA,sBAAA,kBAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
